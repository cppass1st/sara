"use client";
import { useEffect, useState } from "react";
import SegmentedDictation from "./components/SegmentedDictation";
import LessonList from "./components/LessonList";
import lessonsData from "./data/lessons.json";
import FeedbackBar from "./components/FeedbackBar";


export default function Home() {
const [isClient, setIsClient] = useState(false);
const [selectedId, setSelectedId] = useState<number | null>(null);
// üëá –î–û–ë–ê–í–ò–õ–ò —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ü–µ–Ω—ã
const [isCompleted, setIsCompleted] = useState(false);

useEffect(() => setIsClient(true), []);
useEffect(() => {
const saved = localStorage.getItem("sara:lastLessonId");
if (saved) setSelectedId(Number(saved));
}, []);
useEffect(() => {
if (selectedId != null) localStorage.setItem("sara:lastLessonId", String(selectedId));
setIsCompleted(false);

}, [selectedId]);


const lessons = lessonsData as unknown as Array<any>;
const selected = lessons.find((l) => l.id === selectedId) || null;
// üëá –ö–æ–ª–±—ç–∫: SegmentedDictation –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ ‚Äú—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ‚Äù
const handleLessonComplete = () => setIsCompleted(true);


return (
<div className="flex flex-col items-center justify-start min-h-screen p-6 bg-gray-50">
<div className="flex items-center gap-2 mb-6 select-none">
  <div className="bg-blue-600 text-white font-bold text-2xl px-3 py-2 rounded-xl shadow-sm">
    Sara
  </div>
  <span className="text-2xl font-semibold text-gray-700">listening</span>
</div>


{!isClient ? (
<div className="flex items-center justify-center h-[250px] text-gray-400">
Loading...
</div>
) : selected ? (
<div className="w-full flex flex-col items-center">
<div className="w-full max-w-xl mb-3">
<button
onClick={() => setSelectedId(null)}
className="text-sm text-gray-600 hover:text-gray-900"
>
‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω
</button>
</div>
{/* üëá –ü–ï–†–ï–î–ê–Å–ú onComplete ‚Äî –ø—É—Å—Ç—å SegmentedDictation –≤—ã–∑–æ–≤–µ—Ç –µ–≥–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ */}
          <SegmentedDictation lesson={selected} onComplete={handleLessonComplete} />

          {/* üëá –†–µ–Ω–¥–µ—Ä–∏–º –ø–∞–Ω–µ–ª—å –æ—Ç–∑—ã–≤–æ–≤ –ü–û–î —Å—Ü–µ–Ω–æ–π; –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ */}
          <FeedbackBar lessonId={selected.id} visible={isCompleted} />

          {/*
            –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –≤—Ä–µ–º—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
            –ï—Å–ª–∏ SegmentedDictation –ø–æ–∫–∞ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç onComplete,
            –º–æ–∂–µ—à—å –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å visible={true}, —á—Ç–æ–±—ã –ø–æ—Ç–µ—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É:
            <FeedbackBar lessonId={selected.id} visible={true} />
          */}
        </div>
      ) : (
        <LessonList lessons={lessons} onSelect={setSelectedId} />
      )}
</div>
);
}